" vim-plug plugin manager
call plug#begin('~/.vim/plugged')
" Shorthand notation; fetches from github.com/$plugin
Plug 'ctrlpvim/ctrlp.vim'
" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-commentary'
Plug 'henrik/vim-indexed-search'
Plug 'ervandew/supertab'
Plug 'tomasr/molokai'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'w0rp/ale'
Plug 'vim-scripts/vis'
call plug#end()

autocmd FileType python set commentstring=#\ %s

" Map F7 to toggle NERDTree
nnoremap <silent> <F7> :NERDTreeToggle<CR>
" tell nerdtree to ignore .pyc binary files.
let NERDTreeIgnore=['\.pyc$', '\.pyo$']

if has("unix")
  set backupdir=~/.vim/backupdir
  set dir=~/.vim/backupdir
endif

" This tip is from http://vim.wikia.com/wiki/VimTip294 , it maps C-s to save.
if has("gui_running")
  " If the current buffer has never been saved, it will have no name,
  " call the file browser to save it, otherwise just save it.
  :map <silent> <C-S> :if expand("%") == ""<CR>:browse confirm w<CR>:else<CR>:confirm w<CR>:endif<CR>
endif
" Return to insert mode after saving.
imap <c-s> <c-o><c-s>

" We don't want no compatibility with vi
set nocompatible

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

syntax on

set showcmd " Show (partial) command in status line.
set showmatch " Show matching brackets.
set ignorecase " Do case insensitive matching
set smartcase " Do smart case matching
set incsearch " Incremental search
set autowrite " Automatically save before commands like :next and :make

" Number of spaces a tab should be.
set tabstop=4
" Number of spaces used for indentation.
set shiftwidth=4
" Use space instead of tabs.
set expandtab
" insert tabs at the beginning of a line
set smarttab

set autoread " read open files again when changed outside Vim
set browsedir =current " which directory to use for the file browser
set visualbell " visual bell instead of beeping
filetype plugin indent on
" highlight current line
set cursorline
" Break lines longer than 80. (wrap option only displays it but doesn't insert
" breaks. textwidth option does the insertion automatically).
set textwidth=80
" Changed my mind, wrap long lines but do not insert breaks.
" linebreak prevents breaking at the middle of a word, textwidth disables the
" maximum line length setting.
set wrap linebreak textwidth=0

" Highlight searched words
set hlsearch

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Stop vim continuing comments.
set formatoptions-=ql

" Make python fold according to the indentation.
set foldmethod=indent
" Set foldlevelstart to a high number so that folds are open by default.
set foldlevelstart=20

" Removes trailing whitespaces when a file is saved.
" See: http://vim.wikia.com/wiki/Remove_unwanted_spaces
" Previously this was done only on Python source files, now everywhere.
" Note sure why but I have to add python here otherwise it does works only
" for the first opened file in a window.
autocmd FileType python,yaml,js autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

" 1. Use gvim's menu to set your desired font.
" 2. After font is rendered, use "set gfn?" to see its name.
" 3. Add that name below to make it default font. Escape space characters.
" set gfn=DejaVu\ Sans\ Mono\ 12
set gfn=Menlo\ Regular:h16

" Set wildignore to ignore .pyc and .pyo files.
set wildignore+=*/.git/*,*/.hg/*,*.so,*.pyc,*.pyo

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

let g:ctrlp_custom_ignore = {
	\ 'dir':  'uploads$\|\.hg$\|\.git$\|node_modules$\|build$',
	\ 'file': '\.exe$\|\.so$\|\.dll$\|\.png$\|\.jpg',
	\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
	\ }

" Remove menu options so that there's more room for text.
":set guioptions-=m  "remove menu bar
":set guioptions-=T  "remove toolbar

" Stop pretending that vim packages have ruler set and actually set it.
" Note that Mac doesn't have this by default so it is mandatory there.
set ruler

" So that Shift-Click on a word searches forward.
set mousemodel=extend
" map <c-f> :call JsBeautify()<cr>
" Or better yet, use jq :)
map <c-f> :%!jq '.'<cr>
" or
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType json setlocal shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

colorscheme darkblue

" Ale linter settings. For fast jumping between errors.
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
" Don't run every time text is changed.
let g:ale_lint_on_text_changed = 'never'
" Don't run on opening the file.
let g:ale_lint_on_enter = 0

" Set lines and columns to very large so vim will use the whole screen
set lines=9999 columns=9999

augroup GetAbbrev
    autocmd!
    autocmd VimEnter * let s:abbrev_list = [] |
                \ call substitute(join(readfile($MYVIMRC), "\n"), '\v%(^|\n)\s*i?%(nore)?ab%[brev]\s+%(%(\<expr\>|\<buffer\>)\s+){,2}(\k+)', '\=add(s:abbrev_list, submatch(1))', 'gn')
augroup END

set completefunc=CompleteAbbrev
function! CompleteAbbrev(findstart, base)
    if a:findstart
        return searchpos('\<\k', 'bcnW', line('.'))[1] - 1
    else
        return filter(copy(s:abbrev_list), 'v:val =~ "^" . a:base')
    endif
endfunction
ab ipdb import ipdb; ipdb.set_trace()

" See :ALEFixSuggest for other fixers
" black removed because too obstrusive for legacy codebase
"  'python': ['isort', 'black'],
let g:ale_fixers = {
\   'javascript': ['eslint', 'remove_trailing_lines', 'trim_whitespace'],
\   'python': ['isort'],
\}

" Only enable eslint as linters might have conflicting world views
" eg. semicolon used or omitted?
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['flake8'],
\}

" Show which linter is used and if error or warning
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let b:ale_fix_on_save = 1
